{
    "componentChunkName": "component---src-templates-post-template-jsx",
    "path": "/solid20220501/",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"시작\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91\" aria-label=\"시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작</h2>\n<p>나는 과거에 '스프링 입문을 위한 자바 객체 지향의 원리와 이해'를 읽었다. '음 그렇군.' 하고 그냥 읽었다. 개발자 사이에서 얘기하는 개구리책이며 잘읽히는 '갓책'으로 유명하다. 나는 이 책을 다시 보려한다. 그 첫번째 시작점은 SOLID.</p>\n<h2 id=\"왜-solid-를-공부-하는가-\" style=\"position:relative;\"><a href=\"#%EC%99%9C-solid-%EB%A5%BC-%EA%B3%B5%EB%B6%80-%ED%95%98%EB%8A%94%EA%B0%80-\" aria-label=\"왜 solid 를 공부 하는가  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 SOLID 를 공부 하는가 ?</h2>\n<p><strong>'도구를 올바르게 사용하는 법이 있는 것처럼 객체 지향의 특성을 올바르게 사용하는 방법, 즉 객체 지향 언어를 이용해 객체 지향 프로그램을 올바르게 설계해 나가는 방법이나 원칙이 존재할까?'</strong> 결론은 응집도는 높이고 결합도는 낮추는 원칙이라 할 수 있다.\n책의 일부분이다. 이 문장으로 부터 시작을 해야한다.</p>\n<h2 id=\"응집도와-결합도가-뭔데---feat-의존성\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EC%A7%91%EB%8F%84%EC%99%80-%EA%B2%B0%ED%95%A9%EB%8F%84%EA%B0%80-%EB%AD%94%EB%8D%B0---feat-%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-label=\"응집도와 결합도가 뭔데   feat 의존성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>응집도와 결합도가 뭔데? - feat. 의존성</h2>\n<p><strong>결합도</strong> : 모듈(클래스) 간의 상호 의존 정도로서 결합도가 낮으면 모듈 간의 상호 의존성이 줄어들어 객체의 재사용이나 수정, 유지보수가 용이\n<strong>응집도</strong> : 하나의 모듈 내부에 존재하는 구성 요소들. 응집도가 높은 모듈은 하나의 책임에 집중하고 독립성인 높아져 재사용이나 기능, 유지보수가 용이</p>\n<p>너무 말이 어렵다. 코드를 보고 간단하게 생각하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Requiredargsconstructor</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Repository</span> repository<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코드를 보자. Service 라는 모듈은 Repository 라는 모듈을 <strong>의존</strong>하고 있다. 즉, Service라는 모듈은 Repository라는 모듈이 없으면 안된다. Service는 Respository에 의존하고 있다는 것이다. 하지만 Repositroy는 Service가 있든 말든 상관이 없다. 이게 바로 의존성이다. 그럼 <strong>결합도</strong>은?  그거나 그거다 ! 의존성은 결합도이라고도 이야기 하며, 모듈이나 함수간에 얼마나 밀접하게 연결되어 있는가를 표현하는 말일뿐!</p>\n<p>그럼 <strong>응집도</strong>는? 이부분은 되게 애매 모호했다. 구글링을 해보니 클린코드 177page에 좋은 글이 있다는 것을 발견했고 곧바로  집에 있는 책을 보고 이해해버렸다. 누구든 이 글을 보면 쉽게 이해할 수 있을 것이라 생각한다.</p>\n<img src=\"https://images.velog.io/images/ggomjae/post/50820ed1-a7c4-4330-bc57-b7c6c591bda7/image.png\" width=\"100%\" alt=\"\">\n<h2 id=\"srp--single-responsibiliy-principle---단일-책임\" style=\"position:relative;\"><a href=\"#srp--single-responsibiliy-principle---%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84\" aria-label=\"srp  single responsibiliy principle   단일 책임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SRP [ Single Responsibiliy Principle ] : 단일 책임</h2>\n<p>단일 책임. 말 변경해야 하는 이유가 오직 하나 뿐이어야한다. 무슨 말이냐면, 하나의 클래스 또는 하나의 메소드 등 역할과 책임이 많으면 안되고 단 하나! 의 역할과 책임이 있어야 한다는 말이다.\n돌아가지 않고 쉽게 이해하기 위해서는 코드를 보는 것이 가장 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Allargsconstructor</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> companyNumber<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span> jobless <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> employee <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1010L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이게 어떤 의미인가? 백수에겐 회사 번호란 존재하지 않다. 즉, Person이라는 클래스에 책임을 전부 다 주지 않고 백수와 직장인의 클래스를 분리해야 하는 것이다. 그래야 '단일 책임'이다.</p>\n<p>다른 예를 보자. 이번에는 메소드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> jobless <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Boolean</span> employee <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token keyword\">boolean</span> state<span class=\"token punctuation\">;</span>\n        \n    \t<span class=\"token keyword\">void</span> <span class=\"token function\">sayJobState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            \t\t<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"직장인입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n               \t\t<span class=\"token function\">sout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"직장인이 아닙니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n    \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메서드가 단일 책임 원칙을 지키지 않을 경우 나타나는 가장 대표적인 것이 분기처리를 위한 if문이다. 즉, 이러한 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\tabstart <span class=\"token keyword\">void</span> <span class=\"token function\">sayJobState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Jobless</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>추상 클래스로 추상화를 하고 각 Jobless, Employee 클래스에서 상속을 받아 sayJobState를 if문이 아닌 각자 구현을 해주면서 단일 책임 원칙을 적용할 수 있다.</p>\n<h2 id=\"ocp--open-closed-principle---개방-폐쇄\" style=\"position:relative;\"><a href=\"#ocp--open-closed-principle---%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84\" aria-label=\"ocp  open closed principle   개방 폐쇄 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OCP [ Open Closed Principle ] : 개방 폐쇄</h2>\n<p>너무나 당연한 얘기. 확장에 대해서는 열리고, 변경에 대해서는 닫힌다. 자신의 확장에는 열려 있고, 주변의 변화에 대해서는 닫혀 있어야 한다. 너무 어렵다. 근데 이미 우리가 항상 코딩하는 스타일이다. 쉽게 보자.</p>\n<img src=\"https://images.velog.io/images/ggomjae/post/7b162a9b-4a5c-41c6-9f7b-d5902f297994/image.png\" width=\"100%\" alt=\"\">\n<p>Controller에서 ServiceInterface를 의존하고 있다. 그림을 보고 코드를 짜보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Requiredargsconstructor</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ServiceInterface</span> serviceinterface<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 Controller는 ServiceInterface를 주입받고 있다. 그리고 실제로 Controller에서 쓰는 Service는 Interface에 구현된 구현체 ServiceImplementation을 쓴다. 그럼 여기서 같은 Service하나가 추가 되어야하고 그 Service는 겉으로 보기에는 똑같은 기능이지만[ 물론 결과값은 비지니스로직마다 다름] 내부 비지니스 로직이 다른 구현체. 즉, ServiceImplementation2가 있을 때, 어떻게 되는가?\n간단히 Controller의 Interface 주입되는 부분은 가만히 냅두고 ServiceImplementation2를 추가해주면 된다.</p>\n<p>간단히 요약하자. Service 입장에서는 자신이 <strong>확장</strong>되는 것에 개방적이고 Controller 입장에서는 주변의 변화에 전혀 영향이 가지않는 <strong>폐쇄</strong>돼있다고 말할 수 있다.</p>\n<p>이러한 원칙으로 <strong>유연성</strong>, <strong>재사용성</strong>, <strong>유지보수성</strong> 을 얻을 수 있다.</p>\n<h2 id=\"lsp--liskov-substituion-principle---리스코프-치환\" style=\"position:relative;\"><a href=\"#lsp--liskov-substituion-principle---%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98\" aria-label=\"lsp  liskov substituion principle   리스코프 치환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LSP [ Liskov Substituion Principle ] : 리스코프 치환</h2>\n<p>내가 가장 어려워하는 부분이다. 이름부터가 이상하다. 리스코프.\n쉽게 이해하기 위해서는 리스코프 치환 원리가 잘된 것과 안된 것을 보는 것이 가장 쉬울 것같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">1.</span><span class=\"token constant\">MOTHER</span> <span class=\"token constant\">GGOM</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span><span class=\"token constant\">ANIMAL</span> <span class=\"token constant\">DURI</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>1번의 예시를 보자. 아들을 낳고 곧바로 엄마의 역할을 주고 있다. 2번의 예시는 강아지가 태어나고 그 동물의 이름은 DURI이다. 직감적으로 1번은 이상하고 2번은 맞다는 것을 알수 있다. 1번은 원칙에 어긋나고 2번은 원칙에 맞다는 것.</p>\n<p>'<strong>하위 클래스의 인스턴스는 상위형 객체 참조 변수에 대입해 상위 클래스의 인스턴스 역할을 하는데 문제가 없어야한다.</strong>'</p>\n<p>결국 리스코프 치환 원칙은 객체 지향의 상속이라는 특성을 올바르게 활용하면 자연스럽게 얻게 되는 것이다. 아마 여러 개발자들이 리스코프 치환이라는 개념을 모르지만 충분히 이 원칙을 지키면서 개발하고 있을 것이라고 생각한다.</p>\n<h2 id=\"isp--interface-segregation-principle--인터페이스-분리\" style=\"position:relative;\"><a href=\"#isp--interface-segregation-principle--%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC\" aria-label=\"isp  interface segregation principle  인터페이스 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ISP [ Interface Segregation Principle ] :인터페이스 분리</h2>\n<p><strong>클라이언트는 자신이 사용하지 않는 메서드에 의존 관계를 맺으면 안된다.</strong>\n만약, 한명의 남자가 어떤 여자에 남자친구고 어떤 부모의 아들이며 어떤 회사의 개발자라면 그 남자에 대한 역할이 너무 많다. 그래서 그 역할을 분리하는 목적으로 하나의 방법인 각 역할에 따른 남자친구, 아들, 개발자 각각의 클래스를 두어 역할을 분리하는 방법이 있다.</p>\n<p>근데 이 방법은 단일 책임 원칙에 적합하나 방법이 이것이 최선이었을까?</p>\n<img src=\"https://images.velog.io/images/ggomjae/post/48edffa6-524e-4249-9f6b-aecf18ff9f33/image.png\" width=\"100%\" alt=\"\">\n<p>인터페이스를 다중 상속하여 다중 인격화를 시키면 굳이 클래스를 분리하지않아도 가능하다.</p>\n<h2 id=\"dip--dependency-inversion-principle---의존-역전\" style=\"position:relative;\"><a href=\"#dip--dependency-inversion-principle---%EC%9D%98%EC%A1%B4-%EC%97%AD%EC%A0%84\" aria-label=\"dip  dependency inversion principle   의존 역전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DIP [ Dependency Inversion Principle ] : 의존 역전</h2>\n<p>DIP. 의존 역전에 대해서 공부를 해보니 SOLID의 O. 개방 폐쇄 원칙하고 비슷했다. 좀더 이해하기 쉽게 이부분 또한 그림으로 이해해보자.\n<img src=\"https://images.velog.io/images/ggomjae/post/2ac4e143-1f85-4ad6-879a-73aa8245c0ce/image.png\" width=\"100%\" alt=\"\">\n차는 스노우타이어에 의존적이다. 이 타이어가 있어야 돌아간다. 하지만 차는 겨울의 계절이 지나가면 의존적이지 않게 된다. 그래서 다른 타이어로 바꿔야한다. 즉, <strong>의존하기에 부서지기 쉬움</strong>이라는 단점이 있다. 어떻게 개선해야할까?\n<img src=\"https://images.velog.io/images/ggomjae/post/91368965-373a-49e8-b2f5-332f47bbc12c/image.png\" width=\"100%\" alt=\"\"></p>\n<p>자신보다 변하기 쉬운 것에 의존하던 것을 추상화된 인터페이스나 상위클래스를 두어 변하기 쉬운 것의 변화에 영향받지 않게 하는것이 <strong>의존 역전 원칙</strong>이다.</p>\n<h2 id=\"누군가-물어-볼때\" style=\"position:relative;\"><a href=\"#%EB%88%84%EA%B5%B0%EA%B0%80-%EB%AC%BC%EC%96%B4-%EB%B3%BC%EB%95%8C\" aria-label=\"누군가 물어 볼때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>누군가 물어 볼때</h2>\n<p>누군가 : 객체 지향 설계 5법칙 말해보세요.</p>\n<p>급할 필요 없이. SOLID 부터 생각하고 곧바로 앞글자만 따고 차근차근 얘기하기.\n하나하나 차근차근 <strong>S</strong> : 싱글,<strong> O</strong> : 오픈, 클로스 <strong>L</strong> : 리스코프, <strong>I</strong> : 인터페이스, <strong>D</strong> : 의존</p>\n<h2 id=\"끝내며\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EB%82%B4%EB%A9%B0\" aria-label=\"끝내며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝내며</h2>\n<p>공부를 하면서 느낀 것은 원칙을 모르면서도 이미 개발을 할때 고려했던 부분이 많았다는 점이다.\n그래서 이게 굳이 원리를 알아가면서까지 외울필요가 있을까? 싶기도 하다. 하지만 누군가에게 지식을 전파할 때는 꼭 필요하다고 생각한다. 나는 궁극적으로 이런 방향성을 갖고 있기에 오늘 투자한 시간이 굉장히 값지다.</p>","timeToRead":5,"excerpt":"시작 나는 과거에 '스프링 입문을 위한 자바 객체 지향의 원리와 이해'를 읽었다. '음 그렇군.' 하고 그냥 읽었다. 개발자 사이에서 얘기하는 개구리책이며 잘읽히는 '갓책'으로 유명하다. 나는 이 책을 다시 보려한다. 그 첫번째 시작점은 SOLID…","frontmatter":{"title":"객체 지향 설계 5원칙 - SOLID","date":"2022-05-01T22:31:00Z","categories":["theory"],"tags":["theory"],"description":"this is a description","keywords":"pig","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#888888","images":{"fallback":{"src":"/static/d8107205c5da748e0301b7ff3b30d994/97ef7/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%207.37.14.png","srcSet":"/static/d8107205c5da748e0301b7ff3b30d994/97ef7/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%207.37.14.png 660w","sizes":"660px"},"sources":[{"srcSet":"/static/d8107205c5da748e0301b7ff3b30d994/16e27/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%207.37.14.webp 660w","type":"image/webp","sizes":"660px"}]},"width":660,"height":572}}}},"fields":{"slug":"/solid20220501/","date":"2022-05-01T22:31:00.000Z"}}},"pageContext":{"slug":"/solid20220501/","nexttitle":"JPA 영속성 관리","nextslug":"/jpa120220421/","prevtitle":"[1] 서비스 캐싱 - Local, Global","prevslug":"/cachelocalglobal20230523/","tagList":["infra","cache","docker","crawl","spring","java","theory","git","mysql","db"],"categoryList":["redis","docker","java","spring","theory","db"],"latestPostEdges":[{"node":{"fields":{"slug":"/redisinfra20231124/"},"frontmatter":{"template":"post","title":"redis 구성 - 단일, 레플리케이션, 센티넬","tags":["infra","cache"],"categories":["redis"],"date":"2023-11-24T22:31:00Z"}}},{"node":{"fields":{"slug":"/docker20231113/"},"frontmatter":{"template":"post","title":"도커 overlay 용량을 정리해보자.","tags":["docker"],"categories":["docker"],"date":"2023-11-13T22:31:00Z"}}},{"node":{"fields":{"slug":"/crawl20231020/"},"frontmatter":{"template":"post","title":"크롤 버전 이슈","tags":["crawl"],"categories":["java"],"date":"2023-10-20T22:31:00Z"}}},{"node":{"fields":{"slug":"/cachelocalglobal20230523/"},"frontmatter":{"template":"post","title":"[1] 서비스 캐싱 - Local, Global","tags":["spring","java","cache"],"categories":["spring"],"date":"2023-05-23T22:31:00Z"}}},{"node":{"fields":{"slug":"/solid20220501/"},"frontmatter":{"template":"post","title":"객체 지향 설계 5원칙 - SOLID","tags":["theory"],"categories":["theory"],"date":"2022-05-01T22:31:00Z"}}},{"node":{"fields":{"slug":"/jpa120220421/"},"frontmatter":{"template":"post","title":"JPA 영속성 관리","tags":["java","spring"],"categories":["spring"],"date":"2022-04-21T22:31:00Z"}}},{"node":{"fields":{"slug":"/collector20220303/"},"frontmatter":{"template":"post","title":"Collect, Collector, Collectors 정리","tags":["java"],"categories":["java"],"date":"2022-03-03T22:31:00Z"}}},{"node":{"fields":{"slug":"/gitbasic20220218/"},"frontmatter":{"template":"post","title":"GIT 에 대한 그림 이해","tags":["git"],"categories":["theory"],"date":"2022-02-18T22:31:00Z"}}}]}},
    "staticQueryHashes": []}