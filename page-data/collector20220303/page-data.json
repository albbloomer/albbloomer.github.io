{
    "componentChunkName": "component---src-templates-post-template-jsx",
    "path": "/collector20220303/",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"시작\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91\" aria-label=\"시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작</h2>\n<p><strong>모던 자바 인액션 '6장'</strong> 을 읽고 Collect, Collector, Collectors 에 대해서 정리봤다.</p>\n<h2 id=\"알아야하는-정의\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EC%95%84%EC%95%BC%ED%95%98%EB%8A%94-%EC%A0%95%EC%9D%98\" aria-label=\"알아야하는 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알아야하는 정의</h2>\n<p><strong>Collect</strong> : Collector를 매개변수로 하는 스트림의 최종 연산 <br>\n<strong>Collector</strong> : Collect에서 필요한 메서드를 정의해놓은 인터페이스 <br>\n<strong>Collectors</strong> : 다양한 기능의 Collector를 구현한 클래스 제공 <br></p>\n<p>Collect는 최종연산이며 스트림의 요소를 소비해서 최종 결과를 도출한다.</p>\n<h2 id=\"collect-collectors-collector-구조\" style=\"position:relative;\"><a href=\"#collect-collectors-collector-%EA%B5%AC%EC%A1%B0\" aria-label=\"collect collectors collector 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collect, Collectors, Collector 구조</h2>\n<img src=\"https://images.velog.io/images/ggomjae/post/813c5d48-4f6b-4399-9672-7476d676be8f/image.png\" width=\"100%\" alt=\"\">\n<img src=\"https://images.velog.io/images/ggomjae/post/db5aea27-710f-455e-8df2-8e2f49e7c285/image.png\" width=\"100%\" alt=\"\">\n<img src=\"https://images.velog.io/images/ggomjae/post/6e163298-4658-4981-8a11-7853acbdc981/image.png\" width=\"100%\" alt=\"\">\n<p>이러한 구조를 알면, Collector 인터페이스에 정의된 메서드를 구현해서 커스텀 컬렉터를 개발할 수있다는 장점이있음.</p>\n<h2 id=\"왜-우리는-collector를-공부해야-하는가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%9A%B0%EB%A6%AC%EB%8A%94-collector%EB%A5%BC-%EA%B3%B5%EB%B6%80%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"왜 우리는 collector를 공부해야 하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 우리는 Collector를 공부해야 하는가?</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Currency</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> transactionByCurrencies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Transaction</span> transaction <span class=\"token operator\">:</span> transactions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token class-name\">Currency</span> currency <span class=\"token operator\">=</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">></span></span> transactionsForCurrency <span class=\"token operator\">=</span> transactionsByCurrencies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>transactionsForCurrency <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n       transactionsForCurrency <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n       transactionByCurrencies<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>currency<span class=\"token punctuation\">,</span> transactionsForCurrency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n     <span class=\"token punctuation\">}</span> \n     transactionsForCurrency<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Collector</strong>를 쓰지 않고 쌩 코드.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Currency</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transaction</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> transactionsByCurrencies <span class=\"token operator\">=</span> \n  transactions<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transaction</span><span class=\"token operator\">::</span><span class=\"token function\">getCurrency</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Collector</strong>를 쓰고 간결하고 명료하게. 함수형프로그래밍에서는 <strong>무엇</strong>을 원하는지 직접 명시할 수 있어서 어떤 방법으로 이를 얻을 수 있는지는 신경 쓸 필요가없다.\n즉, Collector 인터페이스 구현은 스트림의 요소를 어떤 식으로 도출할지 지정한다.\n또한, Collect로 결과를 수집하는 과정을 간단하면서도 유연한 방식으로 정의할 수 있다는 점이 최대 강점.</p>\n<h2 id=\"collectors메서드\" style=\"position:relative;\"><a href=\"#collectors%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"collectors메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collectors.메서드</h2>\n<img src=\"https://images.velog.io/images/ggomjae/post/5ff201c0-3b2c-4f6e-8488-35a2c75e2421/image.png\" width=\"100%\" alt=\"\">\n<h3 id=\"스트림-요소를-하나의-값으로-리듀스하고-요약\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%9A%94%EC%86%8C%EB%A5%BC-%ED%95%98%EB%82%98%EC%9D%98-%EA%B0%92%EC%9C%BC%EB%A1%9C-%EB%A6%AC%EB%93%80%EC%8A%A4%ED%95%98%EA%B3%A0-%EC%9A%94%EC%95%BD\" aria-label=\"스트림 요소를 하나의 값으로 리듀스하고 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스트림 요소를 하나의 값으로 리듀스하고 요약</h3>\n<img src=\"https://images.velog.io/images/ggomjae/post/1d0f5b03-cac1-4c48-a4c5-65a5bcbb8e3e/image.png\" width=\"100%\" alt=\"\">\n<p>스트림에 있는 객체의 숫자 필드의 <strong>합계</strong>, <strong>평균</strong> 등을 반환하는 연산</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> totalCalories <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">summingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getCalories</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<img src=\"https://images.velog.io/images/ggomjae/post/881d692e-3ae8-487c-83dc-759c3aa9ab1f/image.png\" width=\"100%\" alt=\"\">\n<h3 id=\"요소-그룹화\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%86%8C-%EA%B7%B8%EB%A3%B9%ED%99%94\" aria-label=\"요소 그룹화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요소 그룹화</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dish<span class=\"token punctuation\">.</span>Type</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dish</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> dishesByType <span class=\"token operator\">=</span> \n          menu<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 결과드아.</span>\n<span class=\"token punctuation\">{</span> <span class=\"token constant\">FISH</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>prawns<span class=\"token punctuation\">,</span> salmon<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">OTHER</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>french fries<span class=\"token punctuation\">,</span> rice<span class=\"token punctuation\">,</span> season fruit<span class=\"token punctuation\">,</span> pizza<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">MEAT</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pork<span class=\"token punctuation\">,</span> beef<span class=\"token punctuation\">,</span> chicken<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://images.velog.io/images/ggomjae/post/1c5de941-6b6b-489d-a272-9236354e531c/image.png\" width=\"100%\" alt=\"\">\n<img src=\"https://images.velog.io/images/ggomjae/post/67f0c60b-1217-42f0-8842-8cbca62a98a6/image.png\" width=\"100%\" alt=\"\">\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">return</span> <span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>callsifier<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">,</span> downstream<span class=\"token punctuation\">)</span></code></pre></div>\n<p>으로 들어가 좀 더 깊숙히 들어갈 수 있으나 나는 여기서 멈춘다. <strong>classifier</strong>를 통해서 요소에 대한 키값을 매핑하고 <strong>downstream</strong>을 이용하여 GroupBy 다음 그다음 컬렉션인 <strong>toList</strong>로  !!! <img src=\"https://images.velog.io/images/ggomjae/post/14034d94-89f4-4b61-931f-6bf13d702c5e/image.png\" alt=\"\">\n그룹화 같은 경우 <strong>여러가지 조합</strong>을 효과적으로 할 수 있다는 것이 장점이다.\n예를 들면,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dish<span class=\"token punctuation\">.</span>Type</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> totalCaloriesByType <span class=\"token operator\">=</span> \n      menu<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getType</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">summingInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getCalories</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>각 타입별로 칼로리 합계를 통계내는 코드이다.</p>\n<h3 id=\"요소-분할\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%86%8C-%EB%B6%84%ED%95%A0\" aria-label=\"요소 분할 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요소 분할</h3>\n<p>분할은 <strong>분할 함수</strong>라 불리는 <code class=\"language-text\">프레디케이스</code>를 분류 함수로 사용하는 특수한 그룹화 기능.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dish</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> partitionedMenu <span class=\"token operator\">=</span> \n          menu<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">partitioningBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">isVegetarian</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 결과드아.          </span>\n<span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pork<span class=\"token punctuation\">,</span> beef<span class=\"token punctuation\">,</span> chicken<span class=\"token punctuation\">,</span> prawns<span class=\"token punctuation\">,</span> salmon<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token boolean\">true</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>french fries<span class=\"token punctuation\">,</span> rice<span class=\"token punctuation\">,</span> season fruit<span class=\"token punctuation\">,</span> pizza<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://images.velog.io/images/ggomjae/post/e3beb727-4a26-4116-aef1-03e309544076/image.png\" width=\"100%\" alt=\"\">\n분할 함수가 반환하는 <strong>참, 거짓 두 가지 요소의 스트림 리스트를 모두 유지한다는 것</strong>이 분할의 장점\n<h2 id=\"collector-인터페이스\" style=\"position:relative;\"><a href=\"#collector-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"collector 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collector 인터페이스</h2>\n<p>Collector 인터페이스는 리듀싱 연산을 어떻게 구현할지 제공하는 메서드 집합으로 구성된다.\n<strong>Collector의 생성자 부분</strong>\n<img src=\"https://images.velog.io/images/ggomjae/post/c9534556-2f3d-483f-9396-83be8dc39e58/image.png\" width=\"100%\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public interface Collector&lt;T, A, R> { \n\tSupplier&lt;A> supplier(); \n\tBiConsumer&lt;A, T> accumulator(); \n\tFunction&lt;A, R> finisher(); \n\tBinaryOperator&lt;A> Combiner(); \n\tSet&lt;Characteristics> characteristics(); \n}</code></pre></div>\n<blockquote>\n<p>T : 수집될 스트림 항목의 제네릭 형식</p>\n</blockquote>\n<p>A : 누적자, 즉 수집 과정에서 중간 결과를 누적하는 객체의 형식\nR : 수집 연산 결과 객체의 형식 [ 대다수가 컬렌션 ]</p>\n<h3 id=\"supplier--새로운-결과-컨테이너-만들기\" style=\"position:relative;\"><a href=\"#supplier--%EC%83%88%EB%A1%9C%EC%9A%B4-%EA%B2%B0%EA%B3%BC-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"supplier  새로운 결과 컨테이너 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>supplier : 새로운 결과 컨테이너 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">supplier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"accumlator--결과-컨테이너에-요소-추가하기\" style=\"position:relative;\"><a href=\"#accumlator--%EA%B2%B0%EA%B3%BC-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90-%EC%9A%94%EC%86%8C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"accumlator  결과 컨테이너에 요소 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>accumlator : 결과 컨테이너에 요소 추가하기</h3>\n<p>리듀싱 연산을 수행하는 함수를 반환한다. 각 요소를 처리하는 계산 로직. 각 요소가 올 때마다 중간 결과를 생성하는 로직</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">BiConsumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token function\">accumulator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"finisher--최종-변환값을-결과-컨테이너로-적용\" style=\"position:relative;\"><a href=\"#finisher--%EC%B5%9C%EC%A2%85-%EB%B3%80%ED%99%98%EA%B0%92%EC%9D%84-%EA%B2%B0%EA%B3%BC-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A1%9C-%EC%A0%81%EC%9A%A9\" aria-label=\"finisher  최종 변환값을 결과 컨테이너로 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>finisher : 최종 변환값을 결과 컨테이너로 적용</h3>\n<p>스트림 탐색을 끝내고 누적자 객체를 최종 결과로 반환하면서 누적 과정을 끝낼 때 호출할 함수를 반환해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">finisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://images.velog.io/images/ggomjae/post/730ccbe2-2efd-4f40-9a64-37b52b80c299/image.png\" width=\"100%\" alt=\"\">\n<h3 id=\"combiner--두-결과-컨테이너-병합\" style=\"position:relative;\"><a href=\"#combiner--%EB%91%90-%EA%B2%B0%EA%B3%BC-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%B3%91%ED%95%A9\" aria-label=\"combiner  두 결과 컨테이너 병합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>combiner : 두 결과 컨테이너 병합</h3>\n<p>스트림의 서로 다른 서브파트를 병렬로 처리할 때 누적자가 이 결과를 어떻게 처리할 지 정의한다. 즉, combiner의 역할을 identity[초기값]와 accumulator[중간 로직]를 가지고 여러스레드에서 나눠 계산할 결과를 합치는 역할</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">BinaryOperator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">combiner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    \tlist1<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> list1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://images.velog.io/images/ggomjae/post/3d4ac634-a8d8-4da6-8dfd-7798d0b5242b/image.png\" width=\"100%\" alt=\"\">\n<img src=\"https://images.velog.io/images/ggomjae/post/1e9480d9-7d60-4457-b345-502d6b246dea/image.png\" width=\"100%\" alt=\"\">\n<h3 id=\"charateristics\" style=\"position:relative;\"><a href=\"#charateristics\" aria-label=\"charateristics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>charateristics</h3>\n<p>컬렉터의 연산을 정의하는 Charateristices 형식의 불변 집합을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Characteristics</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">charateristics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>\n    \t<span class=\"token constant\">IDENTITY_FINISH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CONCURRENT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<img src=\"https://images.velog.io/images/ggomjae/post/6e663faf-2f55-4972-a811-4bbb8e637a2e/image.png\" width=\"100%\" alt=\"\">\n<h2 id=\"컬렉터-성능-비교\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%ED%84%B0-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90\" aria-label=\"컬렉터 성능 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉터 성능 비교</h2>\n<p><a href=\"https://github.com/albbloomer\">A_L_B_Bloomer_GITHUB</a></p>\n<h2 id=\"collect-vs-reduce\" style=\"position:relative;\"><a href=\"#collect-vs-reduce\" aria-label=\"collect vs reduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collect vs Reduce</h2>\n<img src=\"https://images.velog.io/images/ggomjae/post/a633307a-bb19-41a3-bc17-745b6537291f/image.png\" width=\"100%\" alt=\"\">\n<img src=\"https://images.velog.io/images/ggomjae/post/63fde077-20da-4b96-b00e-a66d42f26e56/image.png\" width=\"100%\" alt=\"\">\n<h2 id=\"collectors의-정적-팩토리-메소드\" style=\"position:relative;\"><a href=\"#collectors%EC%9D%98-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"collectors의 정적 팩토리 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collectors의 정적 팩토리 메소드</h2>\n<img src=\"https://images.velog.io/images/ggomjae/post/78b721be-033a-4a87-9370-cdee8356dfbf/image.png\" width=\"100%\" alt=\"\">\nGoF 디자인 패턴 중 팩토리 패턴에서 유래한 이 단어는 객체를 생성하는 역할을 분리하겠다는 목적이 있다. <strong>\"생성자 대신 정적 팩토리 메서드를 고려하라\"</strong>\n<ul>\n<li>이름을 가질 수 있다.</li>\n<li>호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.</li>\n<li>반환 타입의 하위타입 객체를 반환할 수 있는 능력이 있다.</li>\n<li>입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.</li>\n<li>정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</li>\n</ul>\n<h3 id=\"정적-팩토리-메소드로\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A1%9C\" aria-label=\"정적 팩토리 메소드로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩토리 메소드로</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">ofAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":6,"excerpt":"시작 모던 자바 인액션 '6장' 을 읽고 Collect, Collector, Collectors 에 대해서 정리봤다. 알아야하는 정의 Collect : Collector를 매개변수로 하는 스트림의 최종 연산 \nCollector : Collect…","frontmatter":{"title":"Collect, Collector, Collectors 정리","date":"2022-03-03T22:31:00Z","categories":["java"],"tags":["java"],"description":"this is a description","keywords":"pig","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#282828","images":{"fallback":{"src":"/static/f654a52ae24754a91d17483cb412f769/7df02/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%207.15.10.png","srcSet":"/static/f654a52ae24754a91d17483cb412f769/7df02/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%207.15.10.png 655w","sizes":"655px"},"sources":[{"srcSet":"/static/f654a52ae24754a91d17483cb412f769/94f11/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%207.15.10.webp 655w","type":"image/webp","sizes":"655px"}]},"width":660,"height":415}}}},"fields":{"slug":"/collector20220303/","date":"2022-03-03T22:31:00.000Z"}}},"pageContext":{"slug":"/collector20220303/","nexttitle":"GIT 에 대한 그림 이해","nextslug":"/gitbasic20220218/","prevtitle":"JPA 영속성 관리","prevslug":"/jpa120220421/","tagList":["infra","cache","docker","crawl","spring","java","theory","git","mysql","db"],"categoryList":["redis","docker","java","spring","theory","db"],"latestPostEdges":[{"node":{"fields":{"slug":"/redisinfra20231124/"},"frontmatter":{"template":"post","title":"redis 구성 - 단일, 레플리케이션, 센티넬","tags":["infra","cache"],"categories":["redis"],"date":"2023-11-24T14:31:00Z"}}},{"node":{"fields":{"slug":"/docker20231113/"},"frontmatter":{"template":"post","title":"도커 overlay 용량을 정리해보자.","tags":["docker"],"categories":["docker"],"date":"2023-11-13T22:31:00Z"}}},{"node":{"fields":{"slug":"/crawl20231020/"},"frontmatter":{"template":"post","title":"크롤 버전 이슈","tags":["crawl"],"categories":["java"],"date":"2023-10-20T22:31:00Z"}}},{"node":{"fields":{"slug":"/cacheloop20230524/"},"frontmatter":{"template":"post","title":"[2] 서비스 캐싱 - 데이터 업데이트","tags":["spring","java","cache"],"categories":["spring"],"date":"2023-05-24T22:31:00Z"}}},{"node":{"fields":{"slug":"/cachelocalglobal20230523/"},"frontmatter":{"template":"post","title":"[1] 서비스 캐싱 - Local, Global","tags":["spring","java","cache"],"categories":["spring"],"date":"2023-05-23T22:31:00Z"}}},{"node":{"fields":{"slug":"/solid20220501/"},"frontmatter":{"template":"post","title":"객체 지향 설계 5원칙 - SOLID","tags":["theory"],"categories":["theory"],"date":"2022-05-01T22:31:00Z"}}},{"node":{"fields":{"slug":"/jpa120220421/"},"frontmatter":{"template":"post","title":"JPA 영속성 관리","tags":["java","spring"],"categories":["spring"],"date":"2022-04-21T22:31:00Z"}}},{"node":{"fields":{"slug":"/collector20220303/"},"frontmatter":{"template":"post","title":"Collect, Collector, Collectors 정리","tags":["java"],"categories":["java"],"date":"2022-03-03T22:31:00Z"}}}]}},
    "staticQueryHashes": []}