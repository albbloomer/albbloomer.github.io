{
    "componentChunkName": "component---src-templates-post-template-jsx",
    "path": "/index20210721/",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"시작\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91\" aria-label=\"시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작</h2>\n<p>책에 있는 순서로 보면 '스토리지 엔진 레벨에서의 접근법'은 맨 마지막에 있는 목차이다. 그럼에도 불구하고 이 마지막 부분을 먼저 공부하는 이유는 페이지 수가 적기 때문이다.  오늘은 충전도 같이 해줘야하는 날이기에 타협을 봤다.</p>\n<h2 id=\"innodb-가-짱-다른-스토리지-엔진은\" style=\"position:relative;\"><a href=\"#innodb-%EA%B0%80-%EC%A7%B1-%EB%8B%A4%EB%A5%B8-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%97%94%EC%A7%84%EC%9D%80\" aria-label=\"innodb 가 짱 다른 스토리지 엔진은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InnoDB 가 짱? 다른 스토리지 엔진은?</h2>\n<p>무조건 InnoDB가 짱일까? 책을 보며 확인해보자. InnoDB는 행단위 잠금으로 데이터를 처리한다.\n우선 여기서 말하는 <strong>'잠금'</strong>이라는 것은 여러 트랜잭션이 동시에 동일한 Data에 접근하는 경우에 서로의 연산들이 동시성에 문제가 될 수 있으므로 간섭하지 않게 제어하는 기법이다.</p>\n<p>MySQL InnoDB 같은 경우에는 행단위 잠금이므로 여러 세션의 동시 쓰기 엑세를 지원하고 그러므로 다중 사용자, 동시성이 높은 OLTP 애플리케이션에 적합하다고 할 수 있다.</p>\n<p>여기서 또 <strong>'OLTP'</strong>는 여러 사용자가 실시간으로 DB Data를 갱신, 조회하는 단위 작업 처리하는 방식이다.</p>\n<p>더 나아가 InnoDB 같은 경우에는 <strong>인덱스와 더불어 데이터까지 버퍼풀에 저장하기 때문에 모든 데이터가 메모리에 있으면 디스크를 읽지 않아도 되므로 강력한 성능</strong>을 발휘한다.</p>\n<p>뭐 아무튼.. InnoDB가 이러한 장점이 있다면 <strong>단점</strong> 또한 존재하는데 그 단점을 말하고자 한다.</p>\n<blockquote>\n<p><strong>1.</strong> 인덱스와 데이터 모두 메모리에 적재되므로 메모리 사용 효율에 좋지 않다.<br>\n<strong>2.</strong> 보조 인덱스 같은 경우도 데이터를 찾아가는 Key를 갖고 있기에 인덱스 사이즈 자체가 커질 수 있으므로 메모리 사용 효율에 좋지 않다.</p>\n</blockquote>\n<p>즉, 단점의 결론은 <strong>메모리</strong> 때문에 <strong>로그 수집</strong>에 대한 용도로 InnoDB를 쓰는 것은 바보같은 짓이다.</p>\n<p>그럼 로그를 수집하는 프로젝트에서 어떤 스토리지엔진을 쓰면 좋을까? 전에 쓰던 글에도 써있지만 <strong>Archive 스토리지 엔진</strong>은 행 단위 잠금이며 데이터를 압축하며 디스크에 저장하기 때문에 적합한 스토리지 엔진이다. 다만, 인덱스를 생성할 수 없으며 UPDATE/DELETE를 사용할 수없기에 이런 부분에서의 기능이 필요하다면 <strong>MyISAM</strong>을 쓰는 것을 권장한다.</p>\n<p><strong>MyISAM</strong>같은 경우는 행단위 잠금이 아니라 테이블 단위 잠금이기에 동시성에 문제가 생기므로 동시 서비스에는 적합하지 않지만, 저사양 서버에서 사용하기 위해 고안된 스토리지 엔진이기에 <strong>메모리</strong> 측면에서 좋은 선택지가 될 수 있다.</p>\n<p>즉, 정리해보자.</p>\n<ul>\n<li><strong>MyISAM vs Archive</strong></li>\n</ul>\n<p>정말 로그 수집만을 위한 프로젝트인 경우 ( UPDATE/DELETE  가 필요로 없는 경우 ) <strong>Archive 스토리지 엔진</strong>을 쓰고 만약, 로그 수집이지만 UPDATE/DELETE가 필요하다면 <strong>MyISAM 스토리지 엔진</strong>을 쓰는 것이 좋은 선택지다.</p>\n<ul>\n<li><strong>InnoDB vs MyISAM </strong></li>\n</ul>\n<p>로그 수집이 목적이 아니며 읽기 전용이면 <strong>MyISAM 스토리지 엔진</strong>을 쓰고 그것이 아니라면 <strong>동시처리, 트랜잭션</strong>을 고려해야 하는 경우 <strong>InnoDB</strong>. 그것이 아니라면 <strong>MyISAM</strong>을 쓰면 된다.</p>\n<h2 id=\"innodb를-사용한다면-barracuda-파일-포맷-고려해보자\" style=\"position:relative;\"><a href=\"#innodb%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4%EB%A9%B4-barracuda-%ED%8C%8C%EC%9D%BC-%ED%8F%AC%EB%A7%B7-%EA%B3%A0%EB%A0%A4%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"innodb를 사용한다면 barracuda 파일 포맷 고려해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InnoDB를 사용한다면 Barracuda 파일 포맷 고려해보자.</h2>\n<p>우선 전제는 MySQL 5.5 버전이상이여야한다. InnoDB 파일 포맷인 <strong>Barracuda을 사용한다면 데이터 저장 공간을 크게 절약</strong>할 수 있다. Dynamic, Compressed 로 저장할 수 있는 형식이 있는데 이 부분은 깊게 다루지 않겠다. 간단하게 말하자면 데이터를 압축하며 저장 공간을 절약할 수 있는 느낌만 알고 가자. <strong>EX.</strong> 버퍼풀이 24GB지만 내부적으로 40GB처럼 사용할 수있다는 것.</p>\n<p>책에 나와있는 필자의 경험에는 Amazon RDS에서 Barracuda Format을 이용하여 디스크 사용 효율을 높인 경험이 있다고 한다. 즉, 메모리가 무궁무진하며 되게 크다면 사용할 일이 없겠지만, <strong>제한된 메모리 크기를 극복하고자 한다면 Barracuda</strong>를 고려해볼만 하다.</p>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>항상 우리는 공부하면서 MySQL은 곧 InnoDB와 같은 느낌으로 공부를 했다. 너무나도 당연시되는 느낌이랄까. 아무 문제 없는 평범한 일상속에서의 실력이 아닌 예상하지 못한 상황에서 실력을 발휘하는 것이 진정한 개발자라고 생각한다. 지금 나의 기준 그리고 나의 위치에서 성능에 있어서 문제가 생겼을 때, <strong>InnoDB가 아닌 다른 스토리지 엔진을 쓰면 되지않을까? </strong> 하는 생각이 나게끔 공부를 하는 것은 좋은 방향성이라고 생각한다.</p>\n<hr>\n<p><strong>참고</strong> : 실무 예제로 다가가는 MySQL 쿼리작성 MySQL 퍼포먼스 최적화 - 성동찬, 한빛미디어</p>","timeToRead":3,"excerpt":"시작 책에 있는 순서로 보면 '스토리지 엔진 레벨에서의 접근법'은 맨 마지막에 있는 목차이다. 그럼에도 불구하고 이 마지막 부분을 먼저 공부하는 이유는 페이지 수가 적기 때문이다.  오늘은 충전도 같이 해줘야하는 날이기에 타협을 봤다. InnoDB…","frontmatter":{"title":"스토리지 엔진 레벨에서의 접근법","date":"2021-07-21T22:31:00Z","categories":["db"],"tags":["mysql","db"],"description":"this is a description","keywords":"pig","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f8ad2ad204d646e4d27fde75e6e09829/c4380/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%206.04.49.png","srcSet":"/static/f8ad2ad204d646e4d27fde75e6e09829/c4380/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%206.04.49.png 615w","sizes":"615px"},"sources":[{"srcSet":"/static/f8ad2ad204d646e4d27fde75e6e09829/da819/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-18%20%EC%98%A4%ED%9B%84%206.04.49.webp 615w","type":"image/webp","sizes":"615px"}]},"width":660,"height":399}}}},"fields":{"slug":"/index20210721/","date":"2021-07-21T22:31:00.000Z"}}},"pageContext":{"slug":"/index20210721/","nexttitle":"MySQL TimeZone 설정 - serverTimezone=Asia/Seoul 로 수정할 때","nextslug":"/timezone20210719/","prevtitle":"Mysql Query Between 과 >=, <= 성능 차이 비교 ( 더미데이터 50만 )","prevslug":"/between20210729/","tagList":["mysql","db"],"categoryList":["db"],"latestPostEdges":[{"node":{"fields":{"slug":"/between20210729/"},"frontmatter":{"template":"post","title":"Mysql Query Between 과 >=, <= 성능 차이 비교 ( 더미데이터 50만 )","tags":["mysql","db"],"categories":["db"],"date":"2021-07-29T20:31:00Z"}}},{"node":{"fields":{"slug":"/index20210721/"},"frontmatter":{"template":"post","title":"스토리지 엔진 레벨에서의 접근법","tags":["mysql","db"],"categories":["db"],"date":"2021-07-21T22:31:00Z"}}},{"node":{"fields":{"slug":"/timezone20210719/"},"frontmatter":{"template":"post","title":"MySQL TimeZone 설정 - serverTimezone=Asia/Seoul 로 수정할 때","tags":["mysql","db"],"categories":["db"],"date":"2021-07-19T22:31:00Z"}}},{"node":{"fields":{"slug":"/dataflow20210719/"},"frontmatter":{"template":"post","title":"MySQL의 데이터 흐름 및 특징  - 답이 아닌 책을 읽으면서 나의 머리에 있는 흐름을 정리한 글","tags":["mysql","db"],"categories":["db"],"date":"2021-07-19T22:19:00Z"}}},{"node":{"fields":{"slug":"/lke20210630/"},"frontmatter":{"template":"post","title":"Where 조건에 대한 이해","tags":["mysql","db"],"categories":["db"],"date":"2021-06-30T22:31:00Z"}}},{"node":{"fields":{"slug":"/clusterindex20210629/"},"frontmatter":{"template":"post","title":"Cluster Index vs Non-Cluster Index 이론 및 성능 비교 ( JPA + MYSQL )","tags":["mysql","db"],"categories":["db"],"date":"2021-06-28T20:31:00Z"}}}]}},
    "staticQueryHashes": []}