{
    "componentChunkName": "component---src-templates-post-template-jsx",
    "path": "/between20210729/",
    "result": {"data":{"markdownRemark":{"html":"<p>현재 친절한 SQL 튜닝을 읽고 있습니다. 그러던 중 Between And 과 Where 부등호 사이의 성능 차이가 있다는 말을 들었고 직접 Test를 진행했습니다.</p>\n<ul>\n<li><strong>2021-04-20</strong> Stack Over flow, 선배님의 의견 그리고 나의 생각으로 다시 생각을 해보았을 때, 실험에 대한 실행 수가 매우 적었으며, 단지 문법만 다른 것일 뿐 explain도 같고 근거가 없기 때문에 서로 같은 것이라고 결론을 내린다. 또한, 부등호 같은 경우에는 DBMS에 종속적이지 않다는 장점이 있다는 것과 DBMS별로 성능에 대한 미세한 차이가 있을 수 있다는 결론을 내리고 글을 끝낸다.</li>\n</ul>\n<h2 id=\"시작\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91\" aria-label=\"시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작</h2>\n<p>현재 친절한 SQL 튜닝을 읽고 있다. 책을 보고 있는 도중에 between, where, in 등의 의문이 들었고 많이 질문을 하면서 얘기하는 도중에 between and 과  >=, &#x3C;= 의 성능차이가 있다는 것을 들었다. 책에도 나오지 않았기에 의아했고 50만개의 더미데이터를 이용해서 직접 테스트를 하려한다. 과거 1년 동안은 <strong>그렇구나</strong> 하고 끝냈다면 이제는 귀찮더라도... 해봐야지</p>\n<h2 id=\"multi-module---db-entity-setting\" style=\"position:relative;\"><a href=\"#multi-module---db-entity-setting\" aria-label=\"multi module   db entity setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi Module - DB Entity Setting</h2>\n<img src=\"https://images.velog.io/images/ggomjae/post/f02c079b-be3d-4463-a465-3ec6b130c828/image.png\" width=\"100%\" alt=\"\">\n<p>더미데이터를 넣기전에 테스트를 할 Entity를 설정했다. 여기서 AccessLeve, GenerationType 같은 경우는 따로 포스팅을 할 계획이다.</p>\n<h2 id=\"약-50만개-데이터-생성\" style=\"position:relative;\"><a href=\"#%EC%95%BD-50%EB%A7%8C%EA%B0%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1\" aria-label=\"약 50만개 데이터 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>약 50만개 데이터 생성</h2>\n<p>딱히 없다. 어느 정도의 Data를 만들고 2018년부터 현재까지 데이터를 하루 단위로 넣어주었다.<br>\n<img src=\"https://images.velog.io/images/ggomjae/post/1d1cd465-1ca2-4728-bef2-a5b4c5ef4919/image.png\" width=\"100%\" alt=\"\"></p>\n<h2 id=\"test---explain\" style=\"position:relative;\"><a href=\"#test---explain\" aria-label=\"test   explain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TEST - Explain</h2>\n<p>첫 번째로 해볼 것은 Explain 이다. Explain을 우선적으로보고 차이점이 있는지 확인을 하자.\n<img src=\"https://images.velog.io/images/ggomjae/post/798cf05b-d650-4e6e-a8c5-9a6f995ee46e/image.png\" width=\"100%\" alt=\"\"></p>\n<ul>\n<li>Between Explain</li>\n</ul>\n<img src=\"https://images.velog.io/images/ggomjae/post/6f3fb711-fd9c-4df5-98c0-187819ea4fbc/image.png\" width=\"100%\" alt=\"\">\n<ul>\n<li>where 부등호 Explain</li>\n</ul>\n<h2 id=\"test---성능-테스트\" style=\"position:relative;\"><a href=\"#test---%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"test   성능 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TEST - 성능 테스트</h2>\n<p>우선 전제로 두어야할 것은 인덱스와 Where절에 DATE TYPE을 고려하지 않고 모든 조건에 맞게끔 TEST를 하였다. 우선 부등호 부터 성능조사를 해보자.\n<img src=\"https://images.velog.io/images/ggomjae/post/77df79b3-0004-4eb6-8531-996495eaedeb/image.png\" width=\"100%\" alt=\"\"></p>\n<ul>\n<li>where 부등호</li>\n</ul>\n<img src=\"https://images.velog.io/images/ggomjae/post/0c3e5bac-0f5f-4751-979f-4b9a3d378794/image.png\" width=\"100%\" alt=\"\">\n혹여나 캐시를 확인하자. 캐시가 없다는 것을 확인했다. 곧바로 Between으로 성능을 테스트하자\n<img src=\"https://images.velog.io/images/ggomjae/post/fe230757-0e9d-415f-9ae9-099869b4a945/image.png\" width=\"100%\" alt=\"\">\n<ul>\n<li>Between</li>\n</ul>\n<p>결과적으로 확실히 Between 보다는 Where 을 이용하여 부등호를 사용해서 조회하는 것이 빠르다. 왜이럴까?</p>\n<h2 id=\"왜-이런-결과가-나오는-것일까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%9D%B4%EB%9F%B0-%EA%B2%B0%EA%B3%BC%EA%B0%80-%EB%82%98%EC%98%A4%EB%8A%94-%EA%B2%83%EC%9D%BC%EA%B9%8C\" aria-label=\"왜 이런 결과가 나오는 것일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 이런 결과가 나오는 것일까?</h2>\n<p>우선 구글링에 검색해보면 CPU Cycle일 것이라는 답변이 있다. 근데 최근 친절한 SQL 튜닝에서 이런 부분에 대해서 좀 세세하게 나온것이 있어서 확인해봤다.</p>\n<img src=\"https://images.velog.io/images/ggomjae/post/7129f0a0-cfed-4c59-a022-1ce3dcf7f9f9/image.png\" width=\"100%\" alt=\"\">\n<ul>\n<li>where 부등호</li>\n</ul>\n<p>물론 이게 정확한 예시가 아닐 수 있다. 정확하게 부등호만 나온 부분을 못찾았기에. 스캔 범위만 우선적으로 확인해봤다.</p>\n<img src=\"https://images.velog.io/images/ggomjae/post/4da5e7d5-ae8d-4c59-a490-db6dba426a01/image.png\" width=\"100%\" alt=\"\">\n<ul>\n<li>Between</li>\n</ul>\n<p>두 사진의 공통점은 범위 스캔하는 부분이 같다는 것이다. 어찌보면 당연하다. Explain 결과도 같으니까.\n눈에 보이지 않은 내부적인 부분이라 생각한다. 그게 CPU Cycle때문이라는 것이다.</p>\n<h2 id=\"끝내며\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EB%82%B4%EB%A9%B0\" aria-label=\"끝내며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝내며</h2>\n<p>결과론적으로는 Between 보다는 Where 부등호가 좀 더 좋은 선택지라는 것이다. 그리고 그 이유는 CPU Cycle이라는 확신을 내리지 못하는 답이다. 이부분에 대해서는 좀더 찾아보고 포스팅을 좀 더 추가를 해야할 것같다. 그래도 값진 경험인 것은 직접 더미데이터를 만들었으며, Explain을 통해 결과를 확인했고 CPU Cycle이라는 결과가 정말 맞는지 직접 책을 찾아보고 Scan 범위를 확인했다는 점에서 이미 나는 점차 성장하고 있다는 것을 느끼며 마무리한다.</p>","timeToRead":2,"excerpt":"현재 친절한 SQL 튜닝을 읽고 있습니다. 그러던 중 Between And 과 Where 부등호 사이의 성능 차이가 있다는 말을 들었고 직접 Test를 진행했습니다. 2021-04-20 Stack Over flow…","frontmatter":{"title":"Mysql Query Between 과 >=, <= 성능 차이 비교 ( 더미데이터 50만 )","date":"2021-07-29T20:31:00Z","categories":["db"],"tags":["mysql","db"],"description":"this is a description","keywords":"pig","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fixed","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/f06dd675e8e7c4cab66ff39cb96a57ed/2e683/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-17%20%EC%98%A4%EC%A0%84%209.28.32.png","srcSet":"/static/f06dd675e8e7c4cab66ff39cb96a57ed/2e683/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-17%20%EC%98%A4%EC%A0%84%209.28.32.png 660w","sizes":"660px"},"sources":[{"srcSet":"/static/f06dd675e8e7c4cab66ff39cb96a57ed/192a4/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202023-11-17%20%EC%98%A4%EC%A0%84%209.28.32.webp 660w","type":"image/webp","sizes":"660px"}]},"width":660,"height":497}}}},"fields":{"slug":"/between20210729/","date":"2021-07-29T20:31:00.000Z"}}},"pageContext":{"slug":"/between20210729/","nexttitle":"스토리지 엔진 레벨에서의 접근법","nextslug":"/index20210721/","prevtitle":"Builder Pattern - @Builder error : Final, @Builder.default (초기화, @Builder will ignore the initializing expression entirely) ","prevslug":"/builderdefault20220103/","tagList":["theory","java","spring","git","mysql","db"],"categoryList":["theory","spring","java","db"],"latestPostEdges":[{"node":{"fields":{"slug":"/solid20220501/"},"frontmatter":{"template":"post","title":"객체 지향 설계 5원칙 - SOLID","tags":["theory"],"categories":["theory"],"date":"2022-05-01T22:31:00Z"}}},{"node":{"fields":{"slug":"/jpa120220421/"},"frontmatter":{"template":"post","title":"JPA 영속성 관리","tags":["java","spring"],"categories":["spring"],"date":"2022-04-21T22:31:00Z"}}},{"node":{"fields":{"slug":"/lke20210630/"},"frontmatter":{"template":"post","title":"Collect, Collector, Collectors 정리","tags":["java"],"categories":["java"],"date":"2022-03-03T22:31:00Z"}}},{"node":{"fields":{"slug":"/gitbasic20220218/"},"frontmatter":{"template":"post","title":"GIT 에 대한 그림 이해","tags":["git"],"categories":["theory"],"date":"2022-02-18T22:31:00Z"}}},{"node":{"fields":{"slug":"/builderdefault20220103/"},"frontmatter":{"template":"post","title":"Builder Pattern - @Builder error : Final, @Builder.default (초기화, @Builder will ignore the initializing expression entirely) ","tags":["spring","java"],"categories":["spring"],"date":"2022-01-03T22:31:00Z"}}},{"node":{"fields":{"slug":"/between20210729/"},"frontmatter":{"template":"post","title":"Mysql Query Between 과 >=, <= 성능 차이 비교 ( 더미데이터 50만 )","tags":["mysql","db"],"categories":["db"],"date":"2021-07-29T20:31:00Z"}}},{"node":{"fields":{"slug":"/index20210721/"},"frontmatter":{"template":"post","title":"스토리지 엔진 레벨에서의 접근법","tags":["mysql","db"],"categories":["db"],"date":"2021-07-21T22:31:00Z"}}},{"node":{"fields":{"slug":"/timezone20210719/"},"frontmatter":{"template":"post","title":"MySQL TimeZone 설정 - serverTimezone=Asia/Seoul 로 수정할 때","tags":["mysql","db"],"categories":["db"],"date":"2021-07-19T22:31:00Z"}}}]}},
    "staticQueryHashes": []}